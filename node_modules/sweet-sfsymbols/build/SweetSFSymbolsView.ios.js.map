{"version":3,"file":"SweetSFSymbolsView.ios.js","sourceRoot":"","sources":["../src/SweetSFSymbolsView.ios.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,MAAM,mBAAmB,CAAC;AAC7D,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAuB,YAAY,EAAE,MAAM,cAAc,CAAC;AAMjE,MAAM,UAAU,GAKZ,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;AAE/C,MAAM,CAAC,OAAO,OAAO,aAAc,SAAQ,KAAK,CAAC,aAAsC;IACrF,MAAM;QACJ,MAAM,EACJ,KAAK,EACL,IAAI,GAAG,EAAE,EACT,YAAY,EACZ,MAAM,EACN,aAAa,GAAG,GAAG,EACnB,GAAG,SAAS,EACb,GAAG,IAAI,CAAC,KAAK,CAAC;QACf,MAAM,WAAW,GACf,YAAY,IAAI,QAAQ,IAAI,YAAY,CAAC,CAAC,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE,MAAM,WAAW,GAAG,WAAW,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,MAAM,MAAM,GAAG;YACb,GAAG,YAAY;YACf,WAAW;SACU,CAAC;QAExB,OAAO,CACL,oBAAC,UAAU,OACL,SAAS,EACb,IAAI,EAAE,IAAI,EACV,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,EACzB,YAAY,EAAE,MAAM,EACpB,aAAa,EAAE,aAAa,EAC5B,KAAK,EAAE;gBACL,GAAG,KAAK;gBACR,KAAK,EAAE,IAAI;gBACX,MAAM,EAAE,IAAI;aACb,GACD,CACH,CAAC;IACJ,CAAC;CACF;AAED,SAAS,eAAe,CAAC,KAAa;IACpC,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,OAAO,KAAK,CAAC;IAC5C,OAAO,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAC5D,CAAC;AAED,SAAS,SAAS,CAAC,MAA0C;IAC3D,OAAO,CACL,MAAM,EAAE,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;QACpB,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,eAAe,CAAC,KAAK,CAAC,EAAE;YACvD,OAAO,YAAY,CAAC,KAAK,CAAC,CAAC;SAC5B;QACD,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,IAAI,EAAE,CACT,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeViewManager } from \"expo-modules-core\";\nimport * as React from \"react\";\n\nimport { ProcessedColorValue, processColor } from \"react-native\";\nimport {\n  NativeSymbolEffect,\n  SweetSFSymbolsViewProps,\n} from \"./SweetSFSymbols.types\";\n\nconst NativeView: React.ComponentType<\n  Omit<SweetSFSymbolsViewProps, \"symbolEffect\" | \"colors\"> & {\n    symbolEffect?: NativeSymbolEffect;\n    colors: (string | ProcessedColorValue | null | undefined | object)[];\n  }\n> = requireNativeViewManager(\"SweetSFSymbols\");\n\nexport default class SweetSFSymbol extends React.PureComponent<SweetSFSymbolsViewProps> {\n  render() {\n    const {\n      style,\n      size = 50,\n      symbolEffect,\n      colors,\n      variableValue = 1.0,\n      ...restProps\n    } = this.props;\n    const repeatValue =\n      symbolEffect && \"repeat\" in symbolEffect ? symbolEffect?.repeat : 1;\n    const repeatCount = repeatValue === true ? -1 : 1;\n    const effect = {\n      ...symbolEffect,\n      repeatCount,\n    } as NativeSymbolEffect;\n\n    return (\n      <NativeView\n        {...restProps}\n        size={size}\n        colors={getColors(colors)}\n        symbolEffect={effect}\n        variableValue={variableValue}\n        style={{\n          ...style,\n          width: size,\n          height: size,\n        }}\n      />\n    );\n  }\n}\n\nfunction isHslOrRgbColor(color: string) {\n  if (typeof color !== \"string\") return false;\n  return color.startsWith(\"hsl\") || color.startsWith(\"rgb\");\n}\n\nfunction getColors(colors?: SweetSFSymbolsViewProps[\"colors\"]) {\n  return (\n    colors?.map((color) => {\n      if (typeof color === \"string\" && isHslOrRgbColor(color)) {\n        return processColor(color);\n      }\n      return color;\n    }) ?? []\n  );\n}\n"]}