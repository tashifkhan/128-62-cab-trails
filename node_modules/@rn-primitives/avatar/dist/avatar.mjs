'use client'

// src/avatar.tsx
import { useIsomorphicLayoutEffect } from "@rn-primitives/hooks";
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import {
  Image as RNImage,
  View as View2
} from "react-native";
var RootContext = React.createContext(null);
var Root = React.forwardRef(({ asChild, alt, ...viewProps }, ref) => {
  const [status, setStatus] = React.useState("error");
  const Component = asChild ? Slot.View : View2;
  return <RootContext.Provider value={{ alt, status, setStatus }}><Component ref={ref} {...viewProps} /></RootContext.Provider>;
});
Root.displayName = "RootAvatar";
function useRootContext() {
  const context = React.useContext(RootContext);
  if (!context) {
    throw new Error("Avatar compound components cannot be rendered outside the Avatar component");
  }
  return context;
}
var Image2 = React.forwardRef(
  ({ asChild, onLoad: onLoadProps, onError: onErrorProps, onLoadingStatusChange, ...props }, ref) => {
    const { alt, setStatus, status } = useRootContext();
    useIsomorphicLayoutEffect(() => {
      if (isValidSource(props?.source)) {
        setStatus("loading");
      }
      return () => {
        setStatus("error");
      };
    }, [props?.source]);
    const onLoad = React.useCallback(
      (e) => {
        setStatus("loaded");
        onLoadingStatusChange?.("loaded");
        onLoadProps?.(e);
      },
      [onLoadProps]
    );
    const onError = React.useCallback(
      (e) => {
        setStatus("error");
        onLoadingStatusChange?.("error");
        onErrorProps?.(e);
      },
      [onErrorProps]
    );
    if (status === "error") {
      return null;
    }
    const Component = asChild ? Slot.Image : RNImage;
    return <Component ref={ref} alt={alt} onLoad={onLoad} onError={onError} {...props} />;
  }
);
Image2.displayName = "ImageAvatar";
var Fallback = React.forwardRef(({ asChild, ...props }, ref) => {
  const { alt, status } = useRootContext();
  if (status !== "error") {
    return null;
  }
  const Component = asChild ? Slot.View : View2;
  return <Component ref={ref} role={"img"} aria-label={alt} {...props} />;
});
Fallback.displayName = "FallbackAvatar";
function isValidSource(source) {
  if (!source) {
    return false;
  }
  if (typeof source === "number") {
    return true;
  }
  if (Array.isArray(source)) {
    return source.some((source2) => !!source2.uri);
  }
  return !!source.uri;
}
export {
  Fallback,
  Image2 as Image,
  Root
};
