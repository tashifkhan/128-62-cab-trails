'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/avatar.tsx
var avatar_exports = {};
__export(avatar_exports, {
  Fallback: () => Fallback,
  Image: () => Image2,
  Root: () => Root
});
module.exports = __toCommonJS(avatar_exports);
var import_hooks = require("@rn-primitives/hooks");
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var RootContext = React.createContext(null);
var Root = React.forwardRef(({ asChild, alt, ...viewProps }, ref) => {
  const [status, setStatus] = React.useState("error");
  const Component = asChild ? Slot.View : import_react_native.View;
  return <RootContext.Provider value={{ alt, status, setStatus }}><Component ref={ref} {...viewProps} /></RootContext.Provider>;
});
Root.displayName = "RootAvatar";
function useRootContext() {
  const context = React.useContext(RootContext);
  if (!context) {
    throw new Error("Avatar compound components cannot be rendered outside the Avatar component");
  }
  return context;
}
var Image2 = React.forwardRef(
  ({ asChild, onLoad: onLoadProps, onError: onErrorProps, onLoadingStatusChange, ...props }, ref) => {
    const { alt, setStatus, status } = useRootContext();
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (isValidSource(props?.source)) {
        setStatus("loading");
      }
      return () => {
        setStatus("error");
      };
    }, [props?.source]);
    const onLoad = React.useCallback(
      (e) => {
        setStatus("loaded");
        onLoadingStatusChange?.("loaded");
        onLoadProps?.(e);
      },
      [onLoadProps]
    );
    const onError = React.useCallback(
      (e) => {
        setStatus("error");
        onLoadingStatusChange?.("error");
        onErrorProps?.(e);
      },
      [onErrorProps]
    );
    if (status === "error") {
      return null;
    }
    const Component = asChild ? Slot.Image : import_react_native.Image;
    return <Component ref={ref} alt={alt} onLoad={onLoad} onError={onError} {...props} />;
  }
);
Image2.displayName = "ImageAvatar";
var Fallback = React.forwardRef(({ asChild, ...props }, ref) => {
  const { alt, status } = useRootContext();
  if (status !== "error") {
    return null;
  }
  const Component = asChild ? Slot.View : import_react_native.View;
  return <Component ref={ref} role={"img"} aria-label={alt} {...props} />;
});
Fallback.displayName = "FallbackAvatar";
function isValidSource(source) {
  if (!source) {
    return false;
  }
  if (typeof source === "number") {
    return true;
  }
  if (Array.isArray(source)) {
    return source.some((source2) => !!source2.uri);
  }
  return !!source.uri;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Fallback,
  Image,
  Root
});
